node('master') {
    try {
        stage('Checkout') {
    	 cleanWs()
    	 checkout([$class: 'SubversionSCM', 
    		additionalCredentials: [], 
    		excludedCommitMessages: '', 
    		excludedRegions: '', 
    		excludedRevprop: '', 
    		excludedUsers: '', 
    		filterChangelog: false, 
    		ignoreDirPropChanges: false, 
    		includedRegions: '', 
    		locations: [[cancelProcessOnExternalsFail: true, 
    		credentialsId: 'JPV', depthOption: 'infinity', 
    		ignoreExternalsOption: true, local: '.', 
    		remote: 'https://192.168.1.200/svn/api/Products/Cloud BLM/Application/branches/Experimental branch/BackEnd Services- Unified Database/CloudBLM-IssueManagementService/IssueManagement-BusinessLogic']],
    		quietOperation: true, 
    		workspaceUpdater: [$class: 'UpdateUpdater']])
    		sh label: '', script: 'chmod -R 777 ${WORKSPACE}'
    	}
    	stage('NPM Install') {
    		sh label: 'NPM Modules Install', script: 'npm install'
    	}
    	stage('Build') {
    		sh label: 'Webpack Build', script: 'npm run prod'
    	}
    	stage('Publish To EC2') {
    		//sshPublisher failOnError: true, publishers: [sshPublisherDesc(configName: 'AWS EC2 Ubuntu Server', sshRetry: [retries: 2, retryDelay: 1000], transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: 'apps/IssueManagementService/BusinessLogic/server.js', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'dist/server.js'), sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: 'apps/IssueManagementService/BusinessLogic', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'node_modules/**/*')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)]
    		sh label: 'Copy dist/server.js', script: 'sudo cp -v ${WORKSPACE}/dist/server.js /opt/apps/IssueService/BusinessLogic/server.js'
            sh label: 'Copy Node Modules', script: 'sudo cp -R ${WORKSPACE}/node_modules /opt/apps/IssueService/BusinessLogic'
            sh label: 'Copy server.config.js', script: 'sudo cp -v ${WORKSPACE}/server.config.js /opt/apps/IssueService/BusinessLogic/server.config.js'
            sh label: 'Copy appversion.json', script: 'sudo cp -v ${WORKSPACE}/appversion.json /opt/apps/IssueService/BusinessLogic/appversion.json'
    	}
    	stage('Restart') {
    		sh label: 'Pm2 restart', script: 'sudo pm2 start /opt/apps/IssueService/BusinessLogic/server.config.js'
    	}
        currentBuild.result = 'SUCCESS'
    } catch (Exception err) {
        currentBuild.result = 'FAILURE'
    }
    stage('Notify') {
        if(currentBuild.result == 'FAILURE') {
            emailext (
              subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}", 
              body: '''${SCRIPT, template="mail.template"}''',
              recipientProviders: [developers()],
              to: "prasannavenkatesan@srinsofttech.com"
            )
        }
    }		
}