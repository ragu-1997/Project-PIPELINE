---
# deploy jaeger collector and query services on marathon, using kafka backend.
- hosts: tag_Service_controller
  become: yes
  vars:
    marathon_uri: http://marathon.service.consul:8080/

    jaeger_elasticsearch_master_1:
      id: monitoring/jaeger-elasticsearch-master-1
      labels:
        tags: "master"
        overrideTaskName: "jaeger-elasticsearch"
        MARATHON_SINGLE_INSTANCE_APP: "true"
      instances: 1
      cpus: 1
      mem: 3072
      container:
        type: "DOCKER"
        docker:
          image: "docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.2"
          parameters:
            - { key: 'volume-driver', value: 'rexray' }
            - { key: 'volume', value: 'jaeger-elasticsearch-master-1:/usr/share/elasticsearch/data' }
            - { key: 'ulimit', value: 'memlock=-1:-1' }
          network: "HOST"
          portMappings:
            - { containerPort: 9200, protocol: 'tcp'}
            - { containerPort: 9300, protocol: 'tcp'}
      requirePorts: true
      fetch:
        - uri: "file:///etc/docker.tar.gz"
      env:
        ES_JAVA_OPTS: "-Xms1536m -Xmx1536m"
        TAKE_FILE_OWNERSHIP: "1"
        bootstrap.memory_lock: "true"
        cluster.name: "jaeger-elasticsearch"
        discovery.zen.minimum_master_nodes: "2"
        discovery.zen.ping.unicast.hosts: "master.jaeger-elasticsearch.service.consul"
        http.port: "9200"
        http.publish_port: "9200"
        network.publish_host: "${HOST}"
        node.data: "true"
        node.ingest: "true"
        node.master: "true"
        node.name: "jaeger-master-1"
        search.remote.connect: "false"
        transport.publish_port: "9300"
        transport.tcp.port: "9300"
      healthChecks:
        - protocol: "HTTP"
          port: 9200
          gracePeriodSeconds: 60
          intervalSeconds: 5
          timeoutSeconds: 5
          maxConsecutiveFailures: 3
          delaySeconds: 15
      upgradeStrategy:
        maximumOverCapacity: 0
        minimumHealthCapacity: 0
      unreachableStrategy:
        inactiveAfterSeconds: 0
        expungeAfterSeconds: 0

    jaeger_elasticsearch_master_2:
      id: monitoring/jaeger-elasticsearch-master-2
      labels:
        tags: "master"
        overrideTaskName: "jaeger-elasticsearch"
        MARATHON_SINGLE_INSTANCE_APP: "true"
      instances: 1
      cpus: 1
      mem: 3072
      container:
        type: "DOCKER"
        docker:
          image: "docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.2"
          parameters:
            - { key: 'volume-driver', value: 'rexray' }
            - { key: 'volume', value: 'jaeger-elasticsearch-master-2:/usr/share/elasticsearch/data' }
            - { key: 'ulimit', value: 'memlock=-1:-1' }
          network: "HOST"
          portMappings:
            - { containerPort: 9200, protocol: 'tcp'}
            - { containerPort: 9300, protocol: 'tcp'}
      requirePorts: true
      fetch:
        - uri: "file:///etc/docker.tar.gz"
      env:
        ES_JAVA_OPTS: "-Xms1536m -Xmx1536m"
        TAKE_FILE_OWNERSHIP: "1"
        bootstrap.memory_lock: "true"
        cluster.name: "jaeger-elasticsearch"
        discovery.zen.minimum_master_nodes: "2"
        discovery.zen.ping.unicast.hosts: "master.jaeger-elasticsearch.service.consul"
        http.port: "9200"
        http.publish_port: "9200"
        network.publish_host: "${HOST}"
        node.data: "true"
        node.ingest: "true"
        node.master: "true"
        node.name: "jaeger-master-2"
        search.remote.connect: "false"
        transport.publish_port: "9300"
        transport.tcp.port: "9300"
      healthChecks:
        - protocol: "HTTP"
          port: 9200
          gracePeriodSeconds: 60
          intervalSeconds: 5
          timeoutSeconds: 5
          maxConsecutiveFailures: 3
          delaySeconds: 15
      upgradeStrategy:
        maximumOverCapacity: 0
        minimumHealthCapacity: 0
      unreachableStrategy:
        inactiveAfterSeconds: 0
        expungeAfterSeconds: 0

    jaeger_elasticsearch_master_3:
      id: monitoring/jaeger-elasticsearch-master-3
      labels:
        tags: "master"
        overrideTaskName: "jaeger-elasticsearch"
        MARATHON_SINGLE_INSTANCE_APP: "true"
      instances: 1
      cpus: 1
      mem: 3072
      container:
        type: "DOCKER"
        docker:
          image: "docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.2"
          parameters:
            - { key: 'volume-driver', value: 'rexray' }
            - { key: 'volume', value: 'jaeger-elasticsearch-master-3:/usr/share/elasticsearch/data' }
            - { key: 'ulimit', value: 'memlock=-1:-1' }
          network: "HOST"
          portMappings:
            - { containerPort: 9200, protocol: 'tcp'}
            - { containerPort: 9300, protocol: 'tcp'}
      requirePorts: true
      fetch:
        - uri: "file:///etc/docker.tar.gz"
      env:
        ES_JAVA_OPTS: "-Xms1536m -Xmx1536m"
        TAKE_FILE_OWNERSHIP: "1"
        bootstrap.memory_lock: "true"
        cluster.name: "jaeger-elasticsearch"
        discovery.zen.minimum_master_nodes: "2"
        discovery.zen.ping.unicast.hosts: "master.jaeger-elasticsearch.service.consul"
        http.port: "9200"
        http.publish_port: "9200"
        network.publish_host: "${HOST}"
        node.data: "true"
        node.ingest: "true"
        node.master: "true"
        node.name: "jaeger-master-3"
        search.remote.connect: "false"
        transport.publish_port: "9300"
        transport.tcp.port: "9300"
      healthChecks:
        - protocol: "HTTP"
          port: 9200
          gracePeriodSeconds: 60
          intervalSeconds: 5
          timeoutSeconds: 5
          maxConsecutiveFailures: 3
          delaySeconds: 15
      upgradeStrategy:
        maximumOverCapacity: 0
        minimumHealthCapacity: 0
      unreachableStrategy:
        inactiveAfterSeconds: 0
        expungeAfterSeconds: 0

    jaeger_collector:
      id: monitoring/jaeger-collector
      instances: 1
      cpus: 1
      mem: 512
      container:
        type: "DOCKER"
        docker:
          image: "jaegertracing/jaeger-collector:1.9"
          command:
          portMappings:
            # only configuring to use TChannel and healthchecks. Ensure agents are configured the same.
            - {containerPort: 14267, hostPort: 14267, protocol: 'tcp'} # TChannel	used by jaeger-agent to send spans in jaeger.thrift format
            # - {containerPort: 14250, hostPort: 14250, protocol: 'tcp'} # gRPC	used by jaeger-agent to send spans in model.proto format
            # - {containerPort: 14268, hostPort: 14268, protocol: 'tcp'} # HTTP	can accept spans directly from clients in jaeger.thrift format over binary thrift protocol
            # - {containerPort: 9411, hostPort: 9411, protocol: 'tcp'} # HTTP	can accept Zipkin spans in JSON or Thrift (disabled by default)
            - {containerPort: 14269, hostPort: 14269, protocol: 'tcp'} # HTTP	Health check at /
      args:
        - "--kafka.brokers"
        - "kafka.service.consul:9092"
      env:
        SPAN_STORAGE_TYPE: kafka
      labels:
        overrideTaskName: "jaeger-collector"
      healthChecks:
        - protocol: "HTTP"
          path: "/"
          port: 14269
          gracePeriodSeconds: 20
          intervalSeconds: 10
          timeoutSeconds: 10
          maxConsecutiveFailures: 3

    jaeger_ingester:
      id: monitoring/jaeger-ingester
      instances: 1
      cpus: 1
      mem: 512
      container:
        type: "DOCKER"
        docker:
          image: "jaegertracing/jaeger-ingester:1.9"
          command:
          portMappings:
            - {containerPort: 14270, hostPort: 14270, protocol: 'tcp'} # HTTP	Health check at /
            - {containerPort: 14271, hostPort: 14271, protocol: 'tcp'} # HTTP	Metrics endpoint
      args:
        - "--kafka.brokers"
        - "kafka.service.consul:9092"
      env:
        SPAN_STORAGE_TYPE: elasticsearch
        ES_SERVER_URLS: "http://master.jaeger-elasticsearch.service.consul:9200"
      labels:
        overrideTaskName: "jaeger-ingester"
      healthChecks:
        - protocol: "HTTP"
          path: "/"
          port: 14270
          gracePeriodSeconds: 20
          intervalSeconds: 10
          timeoutSeconds: 10
          maxConsecutiveFailures: 3

    jaeger_query:
      id: monitoring/jaeger-query
      instances: 1
      cpus: 1
      mem: 512
      container:
        type: "DOCKER"
        docker:
          image: "jaegertracing/jaeger-query:1.9"
          portMappings:
            - {containerPort: 16686, hostPort: 16686, protocol: 'tcp'}
            - {containerPort: 16687, hostPort: 16686, protocol: 'tcp'}
      env:
        SPAN_STORAGE_TYPE: elasticsearch
        ES_SERVER_URLS: "http://master.jaeger-elasticsearch.service.consul:9200"
      labels:
        overrideTaskName: "jaegar-query"
      healthChecks:
        - protocol: "HTTP"
          path: "/"
          port: 16687
          gracePeriodSeconds: 20
          intervalSeconds: 10
          timeoutSeconds: 10
          maxConsecutiveFailures: 3

  tasks:
    - name: marathon deploy monitoring/jaeger-collector
      run_once: true
      marathon: uri='{{ marathon_uri }}' app='{{ jaeger_collector | to_json }}' state=present

    - name: marathon deploy monitoring/jaeger-elasticsearch-master-1
      run_once: true
      marathon: uri='{{ marathon_uri }}' app='{{ jaeger_elasticsearch_master_1 | to_json }}' state=present

    - name: marathon deploy monitoring/jaeger-elasticsearch-master-2
      run_once: true
      marathon: uri='{{ marathon_uri }}' app='{{ jaeger_elasticsearch_master_2 | to_json }}' state=present

    - name: marathon deploy monitoring/jaeger-elasticsearch-master-3
      run_once: true
      marathon: uri='{{ marathon_uri }}' app='{{ jaeger_elasticsearch_master_3 | to_json }}' state=present

    - name: marathon deploy monitoring/jaeger-ingester
      run_once: true
      marathon: uri='{{ marathon_uri }}' app='{{ jaeger_ingester | to_json }}' state=present

    - name: marathon deploy jaeger-query
      run_once: true
      marathon: uri='{{ marathon_uri }}' app='{{ jaeger_query | to_json }}' state=present


- hosts: tag_Service_edge:tag_Service_resource
  become: yes
  serial: 3
  tasks:
    - name: deploy jaeger agent
      docker_container:
        name: jaeger-agent
        state: started
        restart_policy: always
        image: jaegertracing/jaeger-agent:1.9
        command: --reporter.tchannel.host-port=jaeger-collector.service.consul:14267
        ports:
          - "5775:5775/udp"
          - "6831:6831/udp"
          - "6832:6832/udp"
          - "5778:5778/tcp"


