---

- name: create chronos conf directory
  file:
    dest: "{{ chronos_conf_path }}"
    state: directory

- name: systemd check
  stat: path=/usr/lib/systemd/system/
  register: systemd_check

- name: (systemd) configure chronos unit file - requires
  replace:
    dest: "{{ chronos_systemd_unit }}"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  with_items:
    - regexp: '^After=((?!mesos-master.service).*)$'
      replace: 'After=mesos-master.service \1'
    - regexp: '^Wants=((?!mesos-master.service).*)$'
      replace: 'Wants=mesos-master.service \1'
  when: systemd_check.stat.exists == true and chronos_systemd_require_mesos
  notify:
    - restart chronos

- name: (systemd) configure chronos unit file - pre start
  lineinfile:
    dest: "{{ chronos_systemd_unit }}"
    line: "ExecStartPre={{ item }}"
    insertbefore: "^ExecStart="
    state: present
  loop: "{{ chronos_systemd_unit_startpre }}"
  when: systemd_check.stat.exists == true
  notify:
    - restart chronos

- name: set key/value options
  copy:
    dest: "{{ chronos_conf_path }}/{{ item.key }}"
    content: "{{ item.value }}"
  with_dict: "{{ chronos_conf_options }}"
  when: item.value != ""
  notify:
    - restart chronos

- name: set sysconfig variable
  lineinfile:
    dest: "{{ chronos_sysconfig_path }}"
    line: "{{ item.key }}={{ item.value }}"
    create: yes
  with_dict: "{{ chronos_sysconfig_vars }}"
  when: item.value != ""
  notify:
    - restart chronos

- name: enable chronos service
  service: name=chronos enabled=yes state=started
