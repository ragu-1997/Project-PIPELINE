---

- name: Check if old installation exists
  stat: path=/usr/libexec/netdata/netdata-uninstaller.sh
  register: netdata_uninstaller
  tags: ["netdata"]

- name: "Stop old netdata"
  service: name=netdata state=stopped
  when: netdata_uninstaller.stat.exists == true
  tags: ["netdata"]

- name: "Run uninstaller"
  become: true
  command: "/usr/libexec/netdata/netdata-uninstaller.sh --yes -f --env /etc/netdata/.environment"
  when: netdata_uninstaller.stat.exists == true
  tags: ["netdata"]

- name: Remove old files
  file: path=/opt/netdata state=absent
  when: netdata_uninstaller.stat.exists == true
  tags: ["netdata"]

- name: Check if new installation exists
  stat: path=/opt/netdata
  register: netdata_new_install
  tags: ["netdata"]

- name: Download kickstart script
  get_url: url={{ netdata_kickstart_url }} dest={{netdata_kickstart_path}} mode='755'
  when: netdata_new_install.stat.exists == false
  tags: ["netdata"]

- name: "Installation"
  command: "{{netdata_kickstart_path}} {{netdata_kickstart_args}}"
  when: netdata_new_install.stat.exists == false
  tags: ["netdata"]

- name: "Create netdata.conf"
  template:
    src: netdata.conf.j2
    dest: "{{ netdata_conf_file }}"
    owner: "netdata"
    group: "netdata"
    mode: 0644
  notify: "restart netdata"
  tags: ["netdata"]

- name: "Create exporting.conf"
  template:
    src: exporting.conf.j2
    dest: "{{ netdata_exporting_file }}"
    owner: "netdata"
    group: "netdata"
    mode: 0644
  notify: "restart netdata"
  tags: ["netdata"]

- name: "Start netdata"
  service:
    name: netdata
    enabled: yes
    state: started
  tags: ["netdata"]

- meta: flush_handlers
  tags: ["netdata"]

- name: Check if new cloud config exists
  stat: path={{netdata_prefix}}/var/lib/netdata/cloud.d/
  register: netdata_cloud_conf
  tags: ["netdata"]

- name: "Register to netdata cloud"
  become: true
  command: "{{netdata_prefix}}/sbin/netdata-claim.sh -token={{ netdata_cloud_token }} -rooms={{ netdata_cloud_room_id }} -url={{ netdata_cloud_url }}"
  when: netdata_cloud_conf.stat.exists == false and netdata_cloud_token is defined and netdata_cloud_room_id is defined
  tags: ["netdata", "netdata_cloud"]
